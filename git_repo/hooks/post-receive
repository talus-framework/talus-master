#!/bin/bash

while read oldrev newrev ref
do
	if [[ $ref =~ .*/master$ ]];
	then
		echo "master ref received. updating talus code cache"
		code_cache="/talus/talus_code_cache/code"
		if [ ! -d "$code_cache" ]; then
			echo "code hasn't been checked out yet, performing initial git clone"
			git clone /talus/talus_code.git "$code_cache"
		fi

		GIT="git --git-dir $code_cache/.git --work-tree $code_cache"
		changed_requirements=$($GIT pull --all | grep requirements.txt | awk '{print $1}')

		cmd="pip2pi $code_cache/talus/pypi"
		for req in $changed_requirements; do
			if [ $(basename "$req") = "requirements.txt" ] && [ -f "$code_cache/$req" ] ; then
				echo requirements changed in $req
				pip2pi "$code_cache/talus/pypi" -r "$code_cache/$req"
			fi
		done

        echo "recreating tar.gz of main subdirectories"
		dirs=( $code_cache/talus/tools/* $code_cache/talus/components/* $code_cache/talus/packages/* )
        for to_compress in ${dirs[@]}; do
            to_compress_base=$(basename $to_compress)
            # do this in a subshell
            (
                # go the parent directory of the directory we're
                # going to compress
                cd $(dirname "$to_compress")
                compressed_path="$to_compress".tar.gz

                # delete the old tar.gz file if it exists
                if [ -f "$compressed_path" ] ; then
                    rm -f "$compressed_path"
                fi
                
                tar -czf "$compressed_path" "$to_compress_base" >/dev/null
            )
        done

	fi
done
